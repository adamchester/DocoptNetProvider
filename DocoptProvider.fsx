module Docopt

#if INTERACTIVE
#I @"packages/docopt.net/lib/net40"
#r "DocoptNet.dll"
#load "paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fsi"
#load "paket-files/fsprojects/FSharp.TypeProviders.StarterPack/src/ProvidedTypes.fs"
#endif

open System.Reflection
open ProviderImplementation.ProvidedTypes
open Microsoft.FSharp.Core.CompilerServices
open Microsoft.FSharp.Quotations

[<AutoOpen>]
module internal Provide =
    let inline xmlComment comment providedMember =
      (^a : (member AddXmlDocDelayed : (unit -> string) -> unit) providedMember, (fun () -> comment))
      providedMember

// Disable incomplete matches warning
// Incomplete matches are used extensively within this file
// to simplify the code
#nowarn "0025"

[<TypeProvider>]
type DocoptProvider (cfg : TypeProviderConfig) as this =
    inherit TypeProviderForNamespaces ()

    let docopt = DocoptNet.Docopt()
    let ns = "Docopt"
    let asm = Assembly.GetExecutingAssembly()
    let tempAsmPath = System.IO.Path.ChangeExtension(System.IO.Path.GetTempFileName(), ".dll")
    let tempAsm = ProvidedAssembly tempAsmPath

    let t = ProvidedTypeDefinition(asm, ns, "DocOptions", Some typeof<obj>, IsErased = false)
    let parameters = [ProvidedStaticParameter("DocString", typeof<string>)]

    do
        t.DefineStaticParameters(
            parameters,
            fun typeName args ->
                let docoptDocString = args.[0] :?> string
                let generatedCSharp = docopt.GenerateCode(docoptDocString)

                let g = ProvidedTypeDefinition(
                            asm, 
                            ns, 
                            typeName, 
                            Some typeof<obj>, 
                            IsErased = false)

                ProvidedProperty("DocString", typeof<string>, IsStatic=true, GetterCode = (fun _ -> <@@ docoptDocString @@>))
                |> xmlComment "Gets the full doc string."
                |> g.AddMember

                ProvidedProperty("GeneratedCSharp", typeof<string>, IsStatic=true, GetterCode = (fun _ -> <@@ generatedCSharp @@>))
                |> xmlComment "[debug] Gets the C# code that would be generated by DocOpt.NET"
                |> g.AddMember

                let optInstanceType = ProvidedTypeDefinition(
                                        asm, ns, "MyOptions", Some typeof<obj>, IsErased=false)

                docopt.GetNodes(docoptDocString)
                |> Seq.distinctBy (fun node -> node.Name)
                |> Seq.map (function
                    | :? DocoptNet.CommandNode as cmd ->
                        ProvidedProperty(cmd.Name, typeof<bool>, GetterCode = (fun _ -> <@@ false @@>))
                    | :? DocoptNet.OptionNode as opt ->
                        ProvidedProperty(opt.Name, typeof<bool>, GetterCode = (fun _ -> <@@ false @@>))
                    | :? DocoptNet.ArgumentNode as arg ->
                        ProvidedProperty(arg.Name, typeof<string>, GetterCode = (fun _ -> <@@ "test" @@>))
                    | n -> failwithf "unexpected node type %A" (n.GetType())
                )
                |> Seq.map (fun m -> printfn "generated property: %s" m.Name; m)
                |> Seq.iter optInstanceType.AddMember
                tempAsm.AddTypes([optInstanceType])

                let doApplyImpl (argv:string[]) = System.String.Join(", ", argv)

                ProvidedMethod("Apply", [ ProvidedParameter("cmdLineArgs", typeof<string[]>)], typeof<obj>, IsStaticMethod=true, InvokeCode =
                    (fun [ cmdLineArgs ] ->
                        <@@
                            let argv = (%%cmdLineArgs:string[])
                            printfn "inside Apply, got argv: %A" argv
                            // Need to invoke some docopt.net code here... how?
                            // docopt.Apply(...) // <-- causes error:
                            // doApplyImpl argv // <-- causes error:
                            // ..App.fsx (4,16)-(4,83) typecheck error The type provider 'Docopt+DocoptProvider' reported an error: unknown constant '<fun:doApplyImpl@92>' in generated method
                            System.String.Join(", ", argv)
                        @@>))
                |> xmlComment "Parses the command line arguments."
                |> g.AddMember

                tempAsm.AddTypes [g]                
                g
            )

    do
        this.RegisterRuntimeAssemblyLocationAsProbingFolder cfg
        tempAsm.AddTypes [t]
        this.AddNamespace(ns, [t])

[<assembly:TypeProviderAssembly>]
do ()

